Tablas de Multiplicar pl/sql
DECLARE
    numero1 PLS_INTEGER DEFAULT 0;
    numero2 PLS_INTEGER DEFAULT 0;
BEGIN
    numero1:=1;
    WHILE (numero1<=10) LOOP
        dbms_output.put_line (' ');
        dbms_output.put_line ('Tabla del '||numero1);
        numero2:=1;
        while (numero2<=10) LOOP
            dbms_output.put_line (numero1||' x '||numero2||' = '||numero1*numero2);
            numero2:=numero2+1;
        END LOOP;
        numero1:=numero1+1;
    END LOOP;
END;
/

Opcion del profesor
DECLARE
    factor integer;
	tabla integer;
	multipliacion integer;
BEGIN
    tabla:= 1;
    WHILE (tabla<=10) LOOP
		dbms_output.put_line (' ');
		dbms_output.put_line ('Tabla del '|| tabla);
		factor:= 1;
			while (factor<=10) loop
				multiplicacion:= tabla*factor;
				dbms_output.put_line (tabla || ' x '||to_char(factor,'99')||' = '||to_char(multiplicacion,'99');
				factor:=factor + 1;
			end loop;
			tabla:= tabla + 1;
    END LOOP;
END;
/

pasar a binario 12483(decimal)
declare 
	numero integer;
	resto integer;
	resultado varchar(255);
begin
	numero=12483;
	while (numero>0) loop
		resto:= mod(numero,2);
		resultado:= resto || ' ' || resultado;
		numero:=(numero-resto)/2;
	end loop;
	dbms_output.put_line (resultado);
end;
/

Opcion del profesor
para binario y octal
DECLARE
    n integer;
	digito integer;
	salida varchar(255);
	base integer:=2
BEGIN
	salida:=''
    n:=12483;
	while (n>0) loop
		digito:=mod(n,base)
		dbms_output.put_line (digito);
		salida:= digito || salida ;
		n:=(n-digito)/base;
	end loop;
	dbms_output.put_line (salida);
END;
/

para hexadecimal
DECLARE
    n integer;
	digito integer;
	digitoletra char(1);
	salida varchar(255);
	base integer:=16;
BEGIN
	salida:='';
    n:=12483;
	while (n>0) loop
		digito:=mod(n,base);
		dbms_output.put_line (digito);
		digitoletra:=case
			when  digito>= 0 and digito <10 then to_char(digito)
			when digito=10 then 'A'
			when digito=11 then 'B'
			when digito=12 then 'C'
			when digito=13 then 'D'
			when digito=14 then 'E'
			when digito=15 then 'F'
		end ;
		salida:= digitoletra || ' ' ||salida ;
		n:=(n-digito)/base;
	end loop;
	dbms_output.put_line (salida);
END;
/

1.10 Decidir si 1000003 es primo
DECLARE
	numero NUMBER (38):= 1000003;
	c NUMBER (38);
	resto NUMBER (38);
BEGIN 
	FOR c IN 2..numero-1 LOOP
		resto:=(MOD(numero,c));
		IF ( resto = 0 ) then
			dbms_output.put_line ('No es primo');
			dbms_output.put_line (c);
		Exit;
		END IF;
	END LOOP;
    dbms_output.put_line ('Es primo');
END;
/ 

DECLARE
	numero NUMBER (38):= 1000003;
	c NUMBER (38):=2;
	resto NUMBER (38);
	var INTEGER:=1;
BEGIN 
	WHILE (c<numero) LOOP
		resto:=(MOD(numero,c));
		IF ( resto = 0 ) then
			dbms_output.put_line ('No es primo');
			dbms_output.put_line (c);
			var:=0;
			Exit;
		END IF;
		c:=c+1;
	END LOOP;
	IF ( var = 1 ) then
		dbms_output.put_line ('Es primo');
	END IF;
END;
/

DECLARE 
	n number;
	resto number;
	divisor number := -1;
BEGIN
	n:= 1000003;
	for d in 2..n-1 loop
		resto:=mod(n,d);
		if ( resto = 0 ) then
			divisor:= d;
			exit;
		end if;
	end loop;
	if ( divisor <> -1 ) 

1.8. Decidir si un número es capicúa
DECLARE
	numero NUMBER (38):=3853;
	tamaño INTEGER:=length (numero);
	primero CHAR(1);
	segundo CHAR(1);
	var CHAR(1);
BEGIN
	numero:= TO_CHAR(numero);
	For c in 1..tamaño/2 loop
		primero:= SUBSTR (numero,c,1);
		segundo:= SUBSTR (numero,tamaño-c+1,1);
		IF ( primero = segundo ) then
			var:=1;
		ELSE
			var:=0;
			EXIT;
		END IF;
    END LOOP;
    IF ( var = 1 ) then
			dbms_output.put_line ('Es capicua');
		ELSE
			dbms_output.put_line ('No es capicua');
		END IF;
END;
/

primer nº capicua y mayor a 1 millon
create or repalce function es_primo(posibleprimo IN number)
return number
IS
	limitededivisores numeric (10,0);
	esprimo boolean:= true;
BEGIN
	limitededivisores:= sqrt(posibleprimo)+1;
	for posibledivisor in 2..limitededivisores loop
		esprimo:= mod(posibleprimo,posibledivisor) <> 0;
		exit when not esprimo;
	END LOOP;
	if ( esprimo ) then
		return 1;
	else
		return 0;
	end if;
END;
/

create or repalce function es_capicua(n IN number)
return boolean
IS
	numerocomotexto varchar(255);
	longuitud:= length(numerocomotexto);
	for i in 1..longuitud loop
		letra char (1);
BEGIN
	limitededivisores:= sqrt(posibleprimo)+1;
	for posibledivisor in 2..limitededivisores loop
		esprimo:= mod(posibleprimo,posibledivisor) <> 0
		exit when not esprimo;
	END LOOP;
END;
/

BEGIN
	for i in 1000001 to 100000000 loop
		if( es_primo(i) and es_capicua(i) ) then
			dbms_output.put_line(i);
			exit;
		END IF;
	END LOOP;
END;
/

Funcion de un nº primo > 10000000
Create or replace function es_primo(numero2 IN number)
return number
IS
	numero1 numeric (10,0);
	es_primo boolean:= true;
BEGIN
	numero1:= sqrt(numero2)+1;
	for posiblesdivisores in 2..numero1 loop
		es_primo:= mod(numero1,posiblesdivisores) <> 0;
		exit when not es_primo;
	end loop;
	if ( es_primo ) then
		return 1;
	else
		return 0;
	end if;
END;
/

create or replace function es_capicua(numero3 IN number)
return number
IS
	numero4 varchar(255);
	tamaño:=length(numero4);
	
BEGIN
	for n in 2..numero4 loop
		substr (numero4,1,1);
END;
/

Aprobados
create or replace function nota_parcial_media(p_student_id IN number)
return number
is
	media number;
begin
	select 
		avg(NUMERIC_GRADE) 
	into
		media
	from 
		grade 
	where
		student_id=p_student_id;
	return media;
end;
/	

select
	student_id, first_name, last_name, nota_parcial_media(student_id)
from
	student;	
		

Matricular un hermano

create or replace procedure matricula_hermano(
	idqueyaexiste number,
	nuevonombre varchar,
	nuevotratamiento varchar,
	iddelnuevohermano out number
)
as
	fila student%rowtype;
begin
	select 
		*
	into
		fila
	from 
		student 
	where 
		student_id = idqueyaexiste;

	fila.first_name := nuevonombre;
	fila.salutation := nuevotratamiento;
	

	select max(student_id)+1
	into fila.student_id
	from student;
	
	fila.registration_date := sysdate;
	fila.created_by := user;
	fila.created_date := sysdate;
	fila.modified_by := user;
	fila.modified_date := sysdate;

	insert into student values fila;
	iddelnuevohermano := fila.student_id;
end;
/

declare
	nuevoid number;
begin
	matricula_hermano(102,'pepito', 'D. ',  nuevoid);
	dbms_output.put_line('Nuevo: '|| nuevoid);
end;
/



estadisticas
(SQL)
select count(*)
from student
where first_name= 'Crocitto' OR last_name = 'Crocitto';

(PLSQL)
create or replace function cuantos_con_nombre_o_apellidos(
nombreoapellido in varchar
)
return number
as
	CONTADOR NUMBER := 0;
begin
	for estudiante in (select * from student) loop
		if( estudiante.first_name = nombreoapellido ) then
			contador := contador+1;
		end if;
		if( estudiante.last_name = nombreoapellido ) then
			contador := contador+1;
		end if;
	end loop;
end;
/

declare
	cuantos number;
begin
	cuantos := cuantos_con_nombre_o_apellido('Allende');
	dbms_output.put_line( cuantos );
end;
/

id del estudiante y nombres repetidos con el id del estudiante
(SQL)
select studen_id,cuantos_con_nombre_o_apellido(last_name)
from student;

select a.student_id, count(*)
from student a, student b
where
	a.last_name = b.last_name
group by
	a.student_id
order by
	b.student_id

sacar notas maximas y minimas
create or replace procedure notas_maximas_y_notas_minimas(
	notamaxima out number,
	notaminima out number
)
as
	contadornotamaxima number := 0;
	contadornotaminima number := 100;
	
begin
	for n in (select numeric_grade from grade) loop
		if  ( n.numeric_grade > contadornotamaxima) then
			contadornotamaxima := n.numeric_grade;
		end if;
		if  ( n.numeric_grade < contadornotaminima) then
			contadornotaminima := n.numeric_grade;
		end if;
	end loop;
	notamaxima := contadornotamaxima;
	notaminima := contadornotaminima;
end;
/

declare
	notamaxima number;
	notaminima number;	
begin
	notas_maximas_y_notas_minimas(notamaxima,notaminima);
	dbms_output.put_line(notamaxima|| ' ' ||notaminima);
end;
/

select max(numeric_grade) from grade;
select min(numeric_grade) from grade;
select max(numeric_grade),min(numeric_grade) from grade;



Opcion profesor
create or replaze procedure minmax(
	minimo out number
	maximo out number
)
is

begin
	minimo :=101 ;
	maximo :=-1;
	for g in (select numeric_grade from grade) loop
		if( g.numeric_grade > maximo ) then
			maximo := g.numeric_grade;
		end if;
		if( g.numeric_grade < minimo ) then
			minimo := g.numeric_grade;
		end if;
	end loop;
end;
/

declare
	minimo number;
	maximo number;
begin
	minmax (minimo,maximo);
	dbms_output.put_line(minima|| ' ' ||maxima);
end;
/


Creacion de tabla para comprobacion de errores

create table datos (numero number(10));

create or replace procedure println( msg varchar )
as
begin
	dbms_output.put_line(msg);
end;
/

insert into values (1);
insert into values (2);

declare
	n number;
begin
	select numero into n from datos;
exception 
	when no_data_found then
		println( 'No hay datos' );
	when no_data_found then
		println( 'Demasiados  datos' );
end;
/

declare
	n number;
	error number;
begin
	select numero into n from datos;
	error:= sqlcode;
exception when others then
	println ('Error: ' || error || ' ' || sqlrrm);
	case sqlcode()
	when 100 then
		println( 'No hay datos' );
	when 1422 then
		println( 'Demasiados  datos' );
	end case;
end;
/

create table datos (numero number(10) primary key);

create or replace procedure inserta_dato(n number)
as
begin
	insert into datos values (n);
exception when others then
	case sqlcode()
		when -1 then
			dbms_output.put_line( 'Ya existe esa clave' );
	end case;	
end;
/

begin
	inserta_dato (1);
end;
/


create table datos (numero number(10) primary key);

create or replace procedure inserta_dato(n number)
as
begin
	insert into datos values (n);
	dbms_output.put_line( 'He insertado: ' || n);
exception 
	when DUP_VAL_ON_INDEX then
	dbms_output.put_line( 'Ya existe: ' || n);
	end case;	
end;
/

begin
	inserta_dato (1);
end;
/


create table datos (numero number(10));

create or replace procedure inserta_dato(n number)
as
	cuantos number;
begin
	--miro si hay 2
	select count(*) into cuanto from datos where numero=n;
	--Si hay 2, no inserto
	if ( cuantos >=2 ) then
		raise_application_error(-20001, 'No se pueden poner 3 datos iguales en datos: '||n);
	end if;

	insert into datos values (n);	
end;
/

begin
	inserta_dato (1);
end;
/

Matricular hermano 2
create table datos (numero number(10));

create sequence misequencia start with 23;

create or replace procedure inserta_dato(n number)
as
	cuantos number;
begin
	--miro si hay 2
	select count(*) into cuanto from datos where numero=n;
	--Si hay 2, no inserto
	if ( cuantos >=2 ) then
		raise_application_error(-20001, 'No se pueden poner 3 datos iguales en datos: '||n);
	end if;

	insert into datos values (n);	
end;
/

begin
	inserta_dato (misequencia.nextval);
end;
/
